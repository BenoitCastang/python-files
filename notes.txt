REPL = Read, Eval, Print, Loop ## name of the python shell
python3 ## command to lauch the python shell
exit() ## get out of the python shell print() ## print syntax
help() ## go to the python documentation
python3 script.py ## lauch a non executable .py file
./script.py ## lauch executable .py file with python3 if he has shebang #!/usr/bin/en python3 in the beginning
print() ## echo something
1 + 4 ## performing some maths
type() ## indicate type
10 / 5 ## returns float
10 // 5 ## returns integer
my_var = 8 ## declare a variable
print(int + int) ## add variables
print(str + str) ## concatenates variables
list = ['first', 'second', 'third'] ## declare a list
print(list[0]) ## print first element of list
list.pop(2) ## delete third element of list
list.append('fourth') ## add element to a list
dictionary = {'first': 'data1', 'second': 'data2', 'third': 'data3'} ## declare a dictionary
print(dictionary['first']) ## print element named 'first' of dictionary
del dictionary['first'] ## drop element named 'first' of dictionary
dictionary['fourth'] = 'data4' ## add element to a dictionary
'foo' + 6 ## operation impossible between two different data types
str(5) ## make an integer a string
int('5') ## make a string an integer
print(str[0]) ## print first element of a string
print(str[0:4]) ## print a range from first to fifth element
str.upper() ## make a string uppercase
str.lower() ## make a string lowercase
print('bloc\nflop') ## print line return
def additon(a, b):
	return a + b
addition(1, 2) ## basic function syntax
local variable ## exist only in the contextual function
global variable ## exist anywhere in the code
global myvar ## declare a variable as global
myvar = 5 ## setting his value
input() ## return the string written by the user 
input("Text") ## input with text before
continue ## go back to while condition
series of if ## go through all conditions whether they are verified or not -> if; if; if
if, elif, else ## stops the if series if one condition is verified -> if || if || if
if inside if ## verifies if previous condition is verified -> if && if && if
tuple = ('flic', 'flac', floc') ## you can't change a tuple once it's declared, it's non mutable like dictionaries and lists, you must do del tuple before declaring a new one to modify it - but its faster, uses less memory and protects the array from unwanted change
len(array) ## return number of elements of an array
import os ## allows to perform os things ignoring the system
os.getcwd() ## get current working directory
os.rename('first', 'second') ## rename a file
os.system('ls') ## perform system command
os.system('ls', ' -la') ## won't work, takes only one argument
subprocess.call(['ls', '-la']) ## perform system command
'Bonjour {}'.format('Michael') ## replace {} as placeholders with arguments - works also with names and numbers
exit(1) ## stop the program if some error is encountered, cause you dont want it to continue if this failed; return number in parenthesis
try: ## get ready to catch exception
	command ## perform the command
except: ## catch all exceptions
	command ## perform the command if an exception is catched
except subprocess.CalledProcessError as e: ## catch exception of only one function
